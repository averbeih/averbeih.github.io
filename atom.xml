<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crypto0 (averbeih)</title>
  
  
  <link href="https://averbeih.github.io/atom.xml" rel="self"/>
  
  <link href="https://averbeih.github.io/"/>
  <updated>2024-02-25T14:05:46.387Z</updated>
  <id>https://averbeih.github.io/</id>
  
  <author>
    <name>Crypto0</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Generalized Attack on the Multi-primePower RSA</title>
    <link href="https://averbeih.github.io/2024/02/20/A-Generalized-Attack-on-the-Multi-primePower-RSA/"/>
    <id>https://averbeih.github.io/2024/02/20/A-Generalized-Attack-on-the-Multi-primePower-RSA/</id>
    <published>2024-02-20T08:07:36.000Z</published>
    <updated>2024-02-25T14:05:46.387Z</updated>
    
    <content type="html"><![CDATA[<p>以SICTF的一道题为例对论文进行分析</p><span id="more"></span><h3 id="进阶-easy-or-baby-RSA"><a href="#进阶-easy-or-baby-RSA" class="headerlink" title="[进阶]easy_or_baby_RSA?"></a>[进阶]easy_or_baby_RSA?</h3><p>论文地址：<a href="https://wwt.lanzout.com/i7lU01omy8uf">https://wwt.lanzout.com/i7lU01omy8uf</a>轮子地址：<a href="https://github.com/zarismine/small-private-d-RSA/blob/main/solve.sage">https://github.com/zarismine/small-private-d-RSA/blob/main/solve.sage</a>感谢糖醋小鸡快师傅的博客参考：<a href="https://tangcuxiaojikuai.xyz/post/678d5ec.html#more">https://tangcuxiaojikuai.xyz/post/678d5ec.html#more</a></p><h1 id="task"><a href="#task" class="headerlink" title="task"></a>task</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">from enc import flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(256)</span><br><span class="line">q = getPrime(256)</span><br><span class="line">n = (p**5)*(q**3)</span><br><span class="line">phi = (p-1)*(q-1)*p**4 * q**2</span><br><span class="line">d = getPrime(1380)</span><br><span class="line">e = gmpy2.invert(d,phi)</span><br><span class="line">p1 = gmpy2.next_prime(p)</span><br><span class="line">q1 = gmpy2.next_prime(q)</span><br><span class="line">c = pow(m,65537,p1*q1)</span><br><span class="line"></span><br><span class="line">print(f&quot;c = &#123;c&#125;&quot;)</span><br><span class="line">print(f&quot;n = &#123;n&#125;&quot;)</span><br><span class="line">print(f&quot;e = &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c = 6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138</span><br><span class="line">n = 2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753</span><br><span class="line">e = 1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="本题利用到多项式"><a href="#本题利用到多项式" class="headerlink" title="本题利用到多项式"></a>本题利用到多项式</h1><p><span style="margin-left: 50%; transform: translateX(-50%); display: inline-block; "><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="39.281ex" height="3.778ex" role="img" focusable="false" viewBox="0 -1382.6 17362.1 1669.8" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-1-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-1-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-1-TEX-N-78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z"></path><path id="MJX-1-TEX-LO-28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-LO-29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D43A" xlink:href="#MJX-1-TEX-I-1D43A"></use></g><g data-mml-node="TeXAtom" transform="translate(819,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(799,0)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g></g><g data-mml-node="mo" transform="translate(1955.7,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(3011.5,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,413) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(4132.7,0)"><use data-c="2217" xlink:href="#MJX-1-TEX-N-2217"></use></g><g data-mml-node="msup" transform="translate(4854.9,0)"><g data-mml-node="mi"><use data-c="1D453" xlink:href="#MJX-1-TEX-I-1D453"></use></g><g data-mml-node="mi" transform="translate(636,413) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g><g data-mml-node="mo" transform="translate(6131.5,0)"><use data-c="2217" xlink:href="#MJX-1-TEX-N-2217"></use></g><g data-mml-node="msup" transform="translate(6853.7,0)"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-1-TEX-I-1D441"></use></g><g data-mml-node="TeXAtom" transform="translate(975.3,569.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(833,0)"></use><use data-c="78" xlink:href="#MJX-1-TEX-N-78" transform="translate(1333,0)"></use></g><g data-mml-node="mrow" transform="translate(1861,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="28" xlink:href="#MJX-1-TEX-LO-28"></use></g><g data-mml-node="mn" transform="translate(597,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(1097,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mfrac" transform="translate(1375,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(840,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1618,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2118,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2507,0)"><use data-c="2217" xlink:href="#MJX-1-TEX-N-2217"></use></g><g data-mml-node="mo" transform="translate(3007,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3396,0)"><use data-c="1D461" xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mn" transform="translate(3757,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(4257,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(5035,0)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(5556,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g><g data-mml-node="mi" transform="translate(2162.4,-345) scale(0.707)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><rect width="4403.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6018.7,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mfrac" transform="translate(6296.7,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D460" xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(858,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1636,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2136,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2525,0)"><use data-c="2217" xlink:href="#MJX-1-TEX-N-2217"></use></g><g data-mml-node="mo" transform="translate(3025,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3414,0)"><use data-c="1D461" xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mn" transform="translate(3775,0)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(4275,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(5053,0)"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(5574,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g><g data-mml-node="mi" transform="translate(2162.4,-345) scale(0.707)"><use data-c="1D460" xlink:href="#MJX-1-TEX-I-1D460"></use></g><rect width="4416.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10953.2,0) translate(0 -0.5)"><use data-c="29" xlink:href="#MJX-1-TEX-LO-29"></use></g></g></g></g></g></g></svg></span></p><h1 id="根据题意我们可以分析得出本文中有"><a href="#根据题意我们可以分析得出本文中有" class="headerlink" title="根据题意我们可以分析得出本文中有"></a>根据题意我们可以分析得出本文中有</h1><p><span style="margin-left: 50%; transform: translateX(-50%); display: inline-block; "><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.167ex" height="2.08ex" role="img" focusable="false" viewBox="0 -725.5 4051.8 919.5" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-2-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(1165.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(2221.6,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="mi" transform="translate(536,413) scale(0.707)"><use data-c="1D45F" xlink:href="#MJX-2-TEX-I-1D45F"></use></g></g><g data-mml-node="msup" transform="translate(3126.5,0)"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="mi" transform="translate(543.7,413) scale(0.707)"><use data-c="1D460" xlink:href="#MJX-2-TEX-I-1D460"></use></g></g></g></g></svg></span></p><h1 id="结合代码易得r-5-s-3"><a href="#结合代码易得r-5-s-3" class="headerlink" title="结合代码易得r=5,s=3"></a>结合代码易得r=5,s=3</h1><h1 id="再根据公式"><a href="#再根据公式" class="headerlink" title="再根据公式"></a>再根据公式</h1><p><span style="margin-left: 50%; transform: translateX(-50%); display: inline-block; "><svg style="vertical-align: -2.194ex;" xmlns="http://www.w3.org/2000/svg" width="41.4ex" height="5.498ex" role="img" focusable="false" viewBox="0 -1460 18298.9 2429.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path><path id="MJX-3-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-3-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-3-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-3-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-3-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-3-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-3-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-3-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-3-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-3-TEX-LO-221A" d="M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D6FD" xlink:href="#MJX-3-TEX-I-1D6FD"></use></g><g data-mml-node="mn" transform="translate(599,-150) scale(0.707)"><use data-c="30" xlink:href="#MJX-3-TEX-N-30"></use></g></g><g data-mml-node="mo" transform="translate(1280.3,0)"><use data-c="3D" xlink:href="#MJX-3-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2336.1,0)"><use data-c="31" xlink:href="#MJX-3-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3058.3,0)"><use data-c="2B" xlink:href="#MJX-3-TEX-N-2B"></use></g><g data-mml-node="mfrac" transform="translate(4058.6,0)"><g data-mml-node="mrow" transform="translate(413.8,710)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(500,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(889,0)"><use data-c="1D45F" xlink:href="#MJX-3-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1562.2,0)"><use data-c="2212" xlink:href="#MJX-3-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2562.4,0)"><use data-c="1D460" xlink:href="#MJX-3-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(3031.4,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g><g data-mml-node="mrow" transform="translate(220,-719.9)"><g data-mml-node="mi"><use data-c="1D45F" xlink:href="#MJX-3-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(451,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(840,0)"><use data-c="1D45F" xlink:href="#MJX-3-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1513.2,0)"><use data-c="2B" xlink:href="#MJX-3-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2513.4,0)"><use data-c="1D460" xlink:href="#MJX-3-TEX-I-1D460"></use></g><g data-mml-node="msup" transform="translate(2982.4,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g></g></g><rect width="4008" height="60" x="120" y="220"></rect></g><g data-mml-node="msqrt" transform="translate(8306.6,0)"><g transform="translate(1020,0)"><g data-mml-node="mi"><use data-c="1D460" xlink:href="#MJX-3-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(469,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(858,0)"><use data-c="1D45F" xlink:href="#MJX-3-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1531.2,0)"><use data-c="2B" xlink:href="#MJX-3-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2531.4,0)"><use data-c="1D460" xlink:href="#MJX-3-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(3000.4,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g><g data-mml-node="mo" transform="translate(0,115.3)"><use data-c="221A" xlink:href="#MJX-3-TEX-LO-221A"></use></g><rect width="3389.4" height="60" x="1020" y="1205.3"></rect></g><g data-mml-node="mo" transform="translate(12938.2,0)"><use data-c="2212" xlink:href="#MJX-3-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(13938.4,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(500,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(889,0)"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(1389,0)"><use data-c="1D45F" xlink:href="#MJX-3-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(2062.2,0)"><use data-c="2212" xlink:href="#MJX-3-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(3062.4,0)"><use data-c="1D460" xlink:href="#MJX-3-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(3531.4,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g><g data-mml-node="mrow" transform="translate(494.5,-710)"><g data-mml-node="mi"><use data-c="1D45F" xlink:href="#MJX-3-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(451,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(840,0)"><use data-c="1D45F" xlink:href="#MJX-3-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1513.2,0)"><use data-c="2B" xlink:href="#MJX-3-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2513.4,0)"><use data-c="1D460" xlink:href="#MJX-3-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(2982.4,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g><rect width="4120.4" height="60" x="120" y="220"></rect></g></g></g></svg></span></p><h1 id="可计算出"><a href="#可计算出" class="headerlink" title="可计算出"></a>可计算出</h1><p><span style="margin-left: 50%; transform: translateX(-50%); display: inline-block; "><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="11.57ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 5114.1 899" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path><path id="MJX-4-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-4-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-4-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-4-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-4-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D6FD" xlink:href="#MJX-4-TEX-I-1D6FD"></use></g><g data-mml-node="mn" transform="translate(599,-150) scale(0.707)"><use data-c="30" xlink:href="#MJX-4-TEX-N-30"></use></g></g><g data-mml-node="mo" transform="translate(1280.3,0)"><use data-c="3D" xlink:href="#MJX-4-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2336.1,0)"><use data-c="30" xlink:href="#MJX-4-TEX-N-30"></use><use data-c="2E" xlink:href="#MJX-4-TEX-N-2E" transform="translate(500,0)"></use><use data-c="37" xlink:href="#MJX-4-TEX-N-37" transform="translate(778,0)"></use><use data-c="31" xlink:href="#MJX-4-TEX-N-31" transform="translate(1278,0)"></use><use data-c="31" xlink:href="#MJX-4-TEX-N-31" transform="translate(1778,0)"></use><use data-c="32" xlink:href="#MJX-4-TEX-N-32" transform="translate(2278,0)"></use></g></g></g></svg></span></p><h1 id="由于d-getPrime-1380"><a href="#由于d-getPrime-1380" class="headerlink" title="由于d = getPrime(1380)"></a>由于d = getPrime(1380)</h1><h2 id="参照论⽂构造small-roots的多项式和改造格的多项式"><a href="#参照论⽂构造small-roots的多项式和改造格的多项式" class="headerlink" title="参照论⽂构造small_roots的多项式和改造格的多项式"></a>参照论⽂构造small_roots的多项式和改造格的多项式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">small private d RSA with moduli N=p^r*q^s,that d &lt; 1-(3*r+s)/(r+s)^2 - eps</span><br><span class="line">the eps is </span><br><span class="line">((15*s+1)*r^4-(2*s^2-10*s)*r^3-(s^3-6*s^2+8*s)*r^2+(2*s^3-12*s^2+6*s)*r+s^4-4*s^3+s^2)</span><br><span class="line">/(4*m*(r-s)*(r+s)^3) in theory,by this we can choose the proper m which is lower than theory.</span><br><span class="line">return : one factor of N.you can factor N by this</span><br><span class="line">for example:</span><br><span class="line">p,q : 256</span><br><span class="line">r,s : 5,3</span><br><span class="line">d : 1300,m = 9</span><br><span class="line">d : 1350,m = 14</span><br><span class="line">d : 1360,m = 20</span><br><span class="line">d : 1370,m = 30</span><br><span class="line">d &gt; 1370,m = 40 # spend long time to do this(2800s)</span><br><span class="line">you can choose the larger m to approach the theory solution</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h1 id="所以我们能够根据d而确定m-40"><a href="#所以我们能够根据d而确定m-40" class="headerlink" title="所以我们能够根据d而确定m=40"></a>所以我们能够根据d而确定m=40</h1><h1 id="接下来，构造res-small-roots-f-2-edge-r-s-N-m-这样的一个格并计算"><a href="#接下来，构造res-small-roots-f-2-edge-r-s-N-m-这样的一个格并计算" class="headerlink" title="接下来，构造res=small_roots(f, 2^edge,r,s,N,m)这样的一个格并计算"></a>接下来，构造res=small_roots(f, 2^edge,r,s,N,m)这样的一个格并计算</h1><p>其中small_roots函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def small_roots(f, bound,r,s,N,m):</span><br><span class="line">    t1 = int((r*(r+s-2))/((r-1)*(r+s))*m)</span><br><span class="line">    t2 = m</span><br><span class="line">    bounds = [bound ,1]</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = Sequence([], f.parent())</span><br><span class="line">    x = f.variables()[0]</span><br><span class="line">    for k in range(t2+1):</span><br><span class="line">        for i in range(t2+1-k):</span><br><span class="line">            d=max([0,ceil((r-1)*(t1-k)/r),ceil((s-1)*(t2-k)/s)])</span><br><span class="line">            base=N ^ d * f ^ k * x ^ i</span><br><span class="line">            G.append(base)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">#     B = flatter(B)</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    another question is can&#x27;t use flatter because flatter not support </span><br><span class="line">    the matrix that its row far greater than its cols</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, 1 / factor)</span><br><span class="line">    H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line">    for h in filter(None, B * monomials):</span><br><span class="line">        for i in h.coefficients():</span><br><span class="line">            if gcd(i,N)!=1 and gcd(i,N)!=N:</span><br><span class="line">                return gcd(h.coefficients()[0],N)</span><br><span class="line">    return 0</span><br></pre></td></tr></table></figure><h1 id="d-1370-m-40-spend-long-time-to-do-this-2800s-代码运行约50分钟"><a href="#d-1370-m-40-spend-long-time-to-do-this-2800s-代码运行约50分钟" class="headerlink" title="d > 1370,m = 40 # spend long time to do this(2800s) 代码运行约50分钟"></a>d &gt; 1370,m = 40 # spend long time to do this(2800s) 代码运行约50分钟</h1><h1 id="得到pq后，根据公式可算出d，从而求解flag"><a href="#得到pq后，根据公式可算出d，从而求解flag" class="headerlink" title="得到pq后，根据公式可算出d，从而求解flag"></a>得到pq后，根据公式可算出d，从而求解flag</h1><p><span style="margin-left: 50%; transform: translateX(-50%); display: inline-block; "><svg style="vertical-align: -0.791ex;" xmlns="http://www.w3.org/2000/svg" width="39.289ex" height="2.791ex" role="img" focusable="false" viewBox="0 -883.9 17366 1233.4" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-5-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-5-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-5-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-5-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-5-TEX-SO-28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-5-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-5-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-5-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-5-TEX-SO-29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D451" xlink:href="#MJX-5-TEX-I-1D451"></use></g><g data-mml-node="mo" transform="translate(797.8,0)"><use data-c="2261" xlink:href="#MJX-5-TEX-N-2261"></use></g><g data-mml-node="msup" transform="translate(1853.6,0)"><g data-mml-node="mi"><use data-c="1D452" xlink:href="#MJX-5-TEX-I-1D452"></use></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g></g></g><g data-mml-node="mstyle" transform="translate(3306.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mrow" transform="translate(4472.9,0)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-5-TEX-SO-28"></use></g><g data-mml-node="mo" transform="translate(666.8,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="msup" transform="translate(2833.6,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45F" xlink:href="#MJX-5-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(451,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1229,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g></g></g><g data-mml-node="msup" transform="translate(4642.1,0)"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-5-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(543.7,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D460" xlink:href="#MJX-5-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(469,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1247,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(6471.2,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(6860.2,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(7585.4,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(8585.6,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(9085.6,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(9474.6,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(9863.6,0)"><use data-c="1D45E" xlink:href="#MJX-5-TEX-I-1D45E"></use></g><g data-mml-node="mo" transform="translate(10545.8,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(11546,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(12046,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(12435,0) translate(0 -0.5)"><use data-c="29" xlink:href="#MJX-5-TEX-SO-29"></use></g></g></g></g></svg></span></p><p>所以全部代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">def small_roots(f, bound,r,s,N,m):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    small private d RSA with moduli N=p^r*q^s,that d &lt; 1-(3*r+s)/(r+s)^2 - eps</span><br><span class="line">    the eps is </span><br><span class="line">    ((15*s+1)*r^4-(2*s^2-10*s)*r^3-(s^3-6*s^2+8*s)*r^2+(2*s^3-12*s^2+6*s)*r+s^4-4*s^3+s^2)</span><br><span class="line">    /(4*m*(r-s)*(r+s)^3) in theory,by this we can choose the proper m which is lower than theory.</span><br><span class="line">    return : one factor of N.you can factor N by this</span><br><span class="line">    for example:</span><br><span class="line">    p,q : 256</span><br><span class="line">    r,s : 5,3</span><br><span class="line">    d : 1300,m = 9</span><br><span class="line">    d : 1350,m = 14</span><br><span class="line">    d : 1360,m = 20</span><br><span class="line">    d : 1370,m = 30</span><br><span class="line">    d &gt; 1370,m = 40 # spend long time to do this(2800s)</span><br><span class="line">    you can choose the larger m to approach the theory solution</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    t1 = int((r*(r+s-2))/((r-1)*(r+s))*m)</span><br><span class="line">    t2 = m</span><br><span class="line">    bounds = [bound ,1]</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = Sequence([], f.parent())</span><br><span class="line">    x = f.variables()[0]</span><br><span class="line">    for k in range(t2+1):</span><br><span class="line">        for i in range(t2+1-k):</span><br><span class="line">            d=max([0,ceil((r-1)*(t1-k)/r),ceil((s-1)*(t2-k)/s)])</span><br><span class="line">            base=N ^ d * f ^ k * x ^ i</span><br><span class="line">            G.append(base)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">#     B = flatter(B)</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    another question is can&#x27;t use flatter because flatter not support </span><br><span class="line">    the matrix that its row far greater than its cols</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, 1 / factor)</span><br><span class="line">    H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line">    for h in filter(None, B * monomials):</span><br><span class="line">        for i in h.coefficients():</span><br><span class="line">            if gcd(i,N)!=1 and gcd(i,N)!=N:</span><br><span class="line">                return gcd(h.coefficients()[0],N)</span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line">c = 6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138</span><br><span class="line">N = 2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753</span><br><span class="line">e = 1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221</span><br><span class="line">r,s= 5,3</span><br><span class="line">edge = 1380</span><br><span class="line"></span><br><span class="line">if(0):</span><br><span class="line">    a= -int(inverse(e,N)) %N</span><br><span class="line">    PR.&lt;x,y&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">    f=a-x</span><br><span class="line">    m=40</span><br><span class="line">    res=small_roots(f, 2^edge,r,s,N,m)</span><br><span class="line">    print(res) #3880841886154333953773650424963616396441043690868788265611642694520916610789745536631157643368280831495777902173955747450998897753151868119085453880516169</span><br><span class="line"></span><br><span class="line">q= gmpy2.iroot(int(res),2)[0]</span><br><span class="line">p=int(gmpy2.iroot(N//q^3,5)[0])</span><br><span class="line">assert N==p^5*q^3</span><br><span class="line"></span><br><span class="line">p1 = gmpy2.next_prime(p)</span><br><span class="line">q1 = gmpy2.next_prime(q)</span><br><span class="line">d=inverse(65537,(p1-1)*(q1-1))</span><br><span class="line">print(long_to_bytes(ZZ(pow(c,d,p1*q1))))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;以SICTF的一道题为例对论文进行分析&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>BeginCTF Crypto WP</title>
    <link href="https://averbeih.github.io/2024/02/06/BeginCTF-Crypto-WP/"/>
    <id>https://averbeih.github.io/2024/02/06/BeginCTF-Crypto-WP/</id>
    <published>2024-02-06T15:43:14.000Z</published>
    <updated>2024-02-06T16:24:56.083Z</updated>
    
    <content type="html"><![CDATA[<p>Crypto</p><span id="more"></span><h3 id="baby-classic"><a href="#baby-classic" class="headerlink" title="baby_classic"></a>baby_classic</h3><h1 id="task"><a href="#task" class="headerlink" title="task"></a>task</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from random import *</span><br><span class="line">from string import *</span><br><span class="line">import numpy as np</span><br><span class="line">from secret import plaintext</span><br><span class="line"></span><br><span class="line">ls = ascii_uppercase + &#x27;_.*&#x27;</span><br><span class="line"></span><br><span class="line">def generate_str(length):</span><br><span class="line">    s = &quot;&quot;</span><br><span class="line">    for i in range(length):</span><br><span class="line">        s += choice(ls)</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line">def str2mat(s):</span><br><span class="line">    res = np.zeros((len(s) // 6, 6),dtype=int)</span><br><span class="line">    for i in range(0,len(s)):</span><br><span class="line">        res[i // 6, i % 6] = ls.index(s[i])</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">def mat2str(mat):</span><br><span class="line">    s = &quot;&quot;</span><br><span class="line">    for i in range(len(mat) * 6):</span><br><span class="line">        s += ls[mat[i // 6, i % 6]]</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line">def encrypt(plaintext,key1,key2):</span><br><span class="line">    mat_plaintext = str2mat(plaintext)</span><br><span class="line">    mat_key1 = str2mat(key1)</span><br><span class="line">    mat_key2 = str2mat(key2)</span><br><span class="line"></span><br><span class="line">    enc_matrix = np.dot(mat_plaintext,mat_key1) % 29</span><br><span class="line">    for i in range(len(enc_matrix)):</span><br><span class="line">        for j in range(len(enc_matrix[i])):</span><br><span class="line">            enc_matrix[i][j] = (enc_matrix[i][j] + mat_key2[0][j]) % 29</span><br><span class="line"></span><br><span class="line">    return mat2str(enc_matrix)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    assert len(plaintext) == 72</span><br><span class="line">    m = generate_str(48)</span><br><span class="line">    key1 = generate_str(36)</span><br><span class="line">    key2 = generate_str(6)</span><br><span class="line">    c = encrypt(m, key1, key2)</span><br><span class="line">    ciphertext = encrypt(plaintext, key1, key2)</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    flag = &quot;begin&#123;&quot; + hashlib.md5(plaintext.encode()).hexdigest() + &quot;&#125;&quot;</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    print(f&quot;m = &#123;m&#125;&quot;)</span><br><span class="line">    print(f&quot;c = &#123;c&#125;&quot;)</span><br><span class="line">    print(f&quot;ciphertext = &#123;ciphertext&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">output:</span><br><span class="line">m = VOWAS*TED.AE_UMLVFV*W*HSSSTZIZZZDAKCLXZKM_E*VR*Y</span><br><span class="line">c = QLOKQGUWMUTGZSDINCQVIVOLISFB_FC.IC_OSPLOBGOVSCZY</span><br><span class="line">ciphertext = MHDTBJSZXLHH.Z.VWGLXUV.SDQUPAMEPNVQVQZX_CBDZHM_IBZRGLJP_YSBDXN.VACLDGCO_</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><strong>观察代码可以得知原文构造了一个8x6的矩阵</strong><br><strong>密钥是key1为6x6的矩阵，key2是1x6的矩阵</strong><br>所以设一个未知数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key1=[[x11,x12,x13,x14,x15,x16],</span><br><span class="line">      [x21,x22,x23,x24,x25,x26],</span><br><span class="line">      [x31,x32,x33,x34,x35,x36],</span><br><span class="line">      [x41,x42,x43,x44,x45,x46],</span><br><span class="line">      [x51,x52,x53,x54,x55,x56],</span><br><span class="line">      [x61,x62,x63,x64,x65,x66]]</span><br><span class="line">key2=[y1,y2m,y3,y4,y5,y6]</span><br></pre></td></tr></table></figure><p><em>这里我们把给定的明文和密文也转化为矩阵</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">p=29</span><br><span class="line">m=[[21, 14 ,22  ,0 ,18, 28],</span><br><span class="line"> [19  ,4  ,3 ,27  ,0  ,4],</span><br><span class="line"> [26, 20, 12, 11, 21 , 5],</span><br><span class="line"> [21 ,28 ,22 ,28  ,7, 18],</span><br><span class="line"> [18 ,18 ,19, 25,  8 ,25],</span><br><span class="line"> [25, 25 , 3 , 0, 10, 2],</span><br><span class="line"> [11, 23, 25, 10, 12, 26],</span><br><span class="line"> [ 4 ,28 ,21, 17 ,28, 24]]</span><br><span class="line">c=[[16 ,11, 14 ,10 ,16  ,6],</span><br><span class="line"> [20 ,22, 12 ,20 ,19, 6],</span><br><span class="line"> [25 ,18,  3,  8, 13,  2],</span><br><span class="line"> [16, 21 , 8, 21 ,14 ,11],</span><br><span class="line"> [ 8 ,18 , 5  ,1, 26 , 5],</span><br><span class="line"> [ 2 ,27 , 8  ,2, 26 ,14],</span><br><span class="line"> [18 ,15, 11, 14 , 1 , 6],</span><br><span class="line"> [14 ,21 ,18 , 2 ,25, 24]]</span><br></pre></td></tr></table></figure><p><strong>然后我们开始观察加密方式可以得到c&#x3D;m*key1+key2</strong><br>**也就是说我们可以列出8个方程{(m[1][1]*key1[1][1]+m[1][2]<em>key[2][1]+……+m[1][6]<em>key[6][1])+key2}mod29&#x3D;c[1][1]</em></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f1=m[0][0]*x13+m[0][1]*x23+m[0][2]*x33+m[0][3]*x43+m[0][4]*x53+m[0][5]*x63 - c[0][5] + y3</span><br><span class="line">f2=m[1][0]*x13+m[1][1]*x23+m[1][2]*x33+m[1][3]*x43+m[1][4]*x53+m[1][5]*x63 - c[1][5] + y3</span><br><span class="line">f3=m[2][0]*x13+m[2][1]*x23+m[2][2]*x33+m[2][3]*x43+m[2][4]*x53+m[2][5]*x63 - c[2][5] + y3</span><br><span class="line">f4=m[3][0]*x13+m[3][1]*x23+m[3][2]*x33+m[3][3]*x43+m[3][4]*x53+m[3][5]*x63 - c[3][5] + y3</span><br><span class="line">f5=m[4][0]*x13+m[4][1]*x23+m[4][2]*x33+m[4][3]*x43+m[4][4]*x53+m[4][5]*x63 - c[4][5] + y3</span><br><span class="line">f6=m[5][0]*x13+m[5][1]*x23+m[5][2]*x33+m[5][3]*x43+m[5][4]*x53+m[5][5]*x63 - c[5][5] + y3</span><br><span class="line">f7=m[6][0]*x13+m[6][1]*x23+m[6][2]*x33+m[6][3]*x43+m[6][4]*x53+m[6][5]*x63 - c[6][5] + y3</span><br><span class="line">f8=m[7][0]*x13+m[7][1]*x23+m[7][2]*x33+m[7][3]*x43+m[7][4]*x53+m[7][5]*x63 - c[7][5] + y3</span><br></pre></td></tr></table></figure><p><em>由于这是一个带mod的方程，所以考虑使用Gröbner基求未知数</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">PR.&lt;x13,x23,x33,x43,x53,x63,y3&gt; = PolynomialRing(Zmod(p))</span><br><span class="line"></span><br><span class="line">f1=m[0][0]*x13+m[0][1]*x23+m[0][2]*x33+m[0][3]*x43+m[0][4]*x53+m[0][5]*x63 - c[0][5] + y3</span><br><span class="line">f2=m[1][0]*x13+m[1][1]*x23+m[1][2]*x33+m[1][3]*x43+m[1][4]*x53+m[1][5]*x63 - c[1][5] + y3</span><br><span class="line">f3=m[2][0]*x13+m[2][1]*x23+m[2][2]*x33+m[2][3]*x43+m[2][4]*x53+m[2][5]*x63 - c[2][5] + y3</span><br><span class="line">f4=m[3][0]*x13+m[3][1]*x23+m[3][2]*x33+m[3][3]*x43+m[3][4]*x53+m[3][5]*x63 - c[3][5] + y3</span><br><span class="line">f5=m[4][0]*x13+m[4][1]*x23+m[4][2]*x33+m[4][3]*x43+m[4][4]*x53+m[4][5]*x63 - c[4][5] + y3</span><br><span class="line">f6=m[5][0]*x13+m[5][1]*x23+m[5][2]*x33+m[5][3]*x43+m[5][4]*x53+m[5][5]*x63 - c[5][5] + y3</span><br><span class="line">f7=m[6][0]*x13+m[6][1]*x23+m[6][2]*x33+m[6][3]*x43+m[6][4]*x53+m[6][5]*x63 - c[6][5] + y3</span><br><span class="line">f8=m[7][0]*x13+m[7][1]*x23+m[7][2]*x33+m[7][3]*x43+m[7][4]*x53+m[7][5]*x63 - c[7][5] + y3</span><br><span class="line">Fs = [f1, f2, f3,f4, f5, f6,f7, f8]</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line">t=[]</span><br><span class="line">for b in B:</span><br><span class="line">    assert b.degree() == 1</span><br><span class="line">    mi = ZZ(-b(0, 0, 0,0,0,0,0))</span><br><span class="line">    t.append(mi)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><p><strong>所以，根据以上公式，我们可以求出key1，key2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key1 = [</span><br><span class="line">    [8, 25, 26, 22, 17, 3],</span><br><span class="line">    [4, 26, 12, 23, 6, 0],</span><br><span class="line">    [16, 20, 16, 20, 2, 16],</span><br><span class="line">    [25, 15, 24, 25, 5, 21],</span><br><span class="line">    [25, 23, 18, 1, 19, 11],</span><br><span class="line">    [22, 26, 1, 13, 22, 23],</span><br><span class="line">]</span><br><span class="line">key2 = [[27, 5, 17, 28, 23, 25]]</span><br></pre></td></tr></table></figure><p><em>手撕密钥成功后我们进行解密操作</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">p = 29</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">m = [</span><br><span class="line">    [21, 14, 22, 0, 18, 28],</span><br><span class="line">    [19, 4, 3, 27, 0, 4],</span><br><span class="line">    [26, 20, 12, 11, 21, 5],</span><br><span class="line">    [21, 28, 22, 28, 7, 18],</span><br><span class="line">    [18, 18, 19, 25, 8, 25],</span><br><span class="line">    [25, 25, 3, 0, 10, 2],</span><br><span class="line">    [11, 23, 25, 10, 12, 26],</span><br><span class="line">    [4, 28, 21, 17, 28, 24],</span><br><span class="line">]</span><br><span class="line">c = [</span><br><span class="line">    [16, 11, 14, 10, 16, 6],</span><br><span class="line">    [20, 22, 12, 20, 19, 6],</span><br><span class="line">    [25, 18, 3, 8, 13, 2],</span><br><span class="line">    [16, 21, 8, 21, 14, 11],</span><br><span class="line">    [8, 18, 5, 1, 26, 5],</span><br><span class="line">    [2, 27, 8, 2, 26, 14],</span><br><span class="line">    [18, 15, 11, 14, 1, 6],</span><br><span class="line">    [14, 21, 18, 2, 25, 24],</span><br><span class="line">]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">#sage</span><br><span class="line">ciphertext = [</span><br><span class="line">    [14, 2, 15, 20, 7, 13],</span><br><span class="line">    [20, 20, 6, 12, 13, 11],</span><br><span class="line">    [0, 20, 10, 22, 28, 10],</span><br><span class="line">    [13, 18, 3, 22, 4, 22],</span><br><span class="line">    [5, 11, 3, 16, 6, 16],</span><br><span class="line">    [6, 10, 25, 22, 22, 25],</span><br><span class="line">    [18, 20, 6, 27, 8, 5],</span><br><span class="line">    [5, 20, 19, 13, 3, 12],</span><br><span class="line">    [3, 20, 0, 7, 17, 13],</span><br><span class="line">    [17, 21, 7, 19, 7, 7],</span><br><span class="line">    [25, 8, 10, 22, 6, 6],</span><br><span class="line">    [13, 27, 18, 3, 20, 1],</span><br><span class="line">]</span><br><span class="line">c=matrix(Zmod(p),ciphertext)</span><br><span class="line">key = matrix(Zmod(p),key1)</span><br><span class="line">ls = string.ascii_uppercase + &#x27;_.*&#x27;</span><br><span class="line">def mat2str(mat):</span><br><span class="line">    s = &quot;&quot;</span><br><span class="line">    for i in range(len(mat) * 6):</span><br><span class="line">        s += ls[mat[i // 6][i % 6]]</span><br><span class="line">    return s</span><br><span class="line">m=[[24, 14, 20, 26 ,10, 13],</span><br><span class="line">[14, 22 ,26, 19 , 7 , 4],</span><br><span class="line">[26, 12 ,24 ,18 ,19 , 4],</span><br><span class="line">[17 ,24 ,26 ,14 , 5, 26],</span><br><span class="line">[19 , 7 , 4 ,26 ,12 , 0],</span><br><span class="line">[19 ,17 , 8, 23 ,28 ,28],</span><br><span class="line">[ 1, 20 ,19, 26 ,19 , 7],</span><br><span class="line">[ 8, 18 ,26 , 8 ,18, 26],</span><br><span class="line">[ 1,  4 , 6,  8 ,13, 13],</span><br><span class="line">[ 8 ,13 , 6 ,26 ,14 , 5],</span><br><span class="line">[26 , 2 ,17 ,24, 15, 19],</span><br><span class="line">[14 ,11, 14 , 6 ,24, 27]]</span><br><span class="line">m=mat2str(m)</span><br><span class="line">flag = &quot;begin&#123;&quot; + hashlib.md5(m.encode()).hexdigest() + &quot;&#125;&quot;</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><strong>这个小丑解法仅供大家娱乐，看看就好</strong></p><p>别的师傅分享的正经解法如下：<a href="https://shinichicun.top/">https://shinichicun.top/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from string import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">def str2mat(s, ff):</span><br><span class="line">    if ff:</span><br><span class="line">        res = matrix(Zmod(p), [[0]*7]*(len(s)//6))</span><br><span class="line">        for i in range(0, len(s)):</span><br><span class="line">            res[i // 6, i % 6] = ls.index(s[i])</span><br><span class="line">        for i in range(len(s)//6):</span><br><span class="line">            res[i, -1] = 1</span><br><span class="line">    else:</span><br><span class="line">        res = matrix([[0]*6]*(len(s)//6))</span><br><span class="line">        for i in range(0, len(s)):</span><br><span class="line">            res[i // 6, i % 6] = ls.index(s[i])</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mat2str(mat):</span><br><span class="line">    s = &quot;&quot;</span><br><span class="line">    for i in range(len(list(mat))*6):</span><br><span class="line">        s += ls[mat[i // 6, i % 6]]</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ls = ascii_uppercase + &#x27;_.*&#x27;</span><br><span class="line">p = 29</span><br><span class="line">m = &quot;VOWAS*TED.AE_UMLVFV*W*HSSSTZIZZZDAKCLXZKM_E*VR*Y&quot;</span><br><span class="line">c = &quot;QLOKQGUWMUTGZSDINCQVIVOLISFB_FC.IC_OSPLOBGOVSCZY&quot;</span><br><span class="line">c1 = &quot;MHDTBJSZXLHH.Z.VWGLXUV.SDQUPAMEPNVQVQZX_CBDZHM_IBZRGLJP_YSBDXN.VACLDGCO_&quot;</span><br><span class="line">m = str2mat(m, 1)</span><br><span class="line">c = str2mat(c, 0)</span><br><span class="line">c1 = str2mat(c1, 0)</span><br><span class="line">k = m.solve_right(c)</span><br><span class="line">k2 = matrix(Zmod(p), [list(k[-1])]*len(list(c1)))</span><br><span class="line">k1 = k[:-1].inverse()</span><br><span class="line">m = (c1-k2) * k1</span><br><span class="line">print(mat2str(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Crypto&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>学习导航</title>
    <link href="https://averbeih.github.io/2024/01/11/%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%88%AA/"/>
    <id>https://averbeih.github.io/2024/01/11/%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%88%AA/</id>
    <published>2024-01-11T13:41:36.000Z</published>
    <updated>2024-01-25T17:54:14.036Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到二进制的世界！！！</p><span id="more"></span><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><p>pwntools的使用:<br><a href="https://luiino.github.io/2023/07/31/pwntools%E7%9A%84%E4%BD%BF%E7%94%A8/">https://luiino.github.io/2023/07/31/pwntools%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><p>格密码：<a href="https://xenny.wiki/">https://xenny.wiki/</a><br>密码入门学习指南:<a href="https://harry0597.com/2022/08/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/">https://harry0597.com/2022/08/24/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</a><br>sagemath的使用教程：<a href="https://luiino.github.io/2023/07/31/sagemath%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/">https://luiino.github.io/2023/07/31/sagemath%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</a><br>AES:<a href="https://blog.csdn.net/weixin_73270563/article/details/135634596?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_73270563/article/details/135634596?spm=1001.2014.3001.5501</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;欢迎来到二进制的世界！！！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>安洵杯密码复现</title>
    <link href="https://averbeih.github.io/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E5%AF%86%E7%A0%81%E5%A4%8D%E7%8E%B0/"/>
    <id>https://averbeih.github.io/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E5%AF%86%E7%A0%81%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-12-24T14:20:40.000Z</published>
    <updated>2023-12-25T08:55:29.192Z</updated>
    
    <content type="html"><![CDATA[<p>安洵杯密码题目分析</p><span id="more"></span><h1 id="密码1："><a href="#密码1：" class="headerlink" title="密码1："></a>密码1：</h1><p><strong>task</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">import hashlib</span><br><span class="line">import socketserver</span><br><span class="line">from Crypto.Util.number import isPrime, long_to_bytes, getStrongPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">flag = b&quot;D0g3&#123;******************************************&#125;&quot;</span><br><span class="line"></span><br><span class="line">class MyServer(socketserver.BaseRequestHandler):</span><br><span class="line">    def proof(self):</span><br><span class="line">        random.seed(os.urandom(8))</span><br><span class="line">        random_str = &#x27;&#x27;.join([random.choice(string.ascii_letters + string.digits) for _ in range(20)])</span><br><span class="line">        str_sha256 = hashlib.sha256(random_str.encode()).hexdigest()</span><br><span class="line">        self.request.sendall((&#x27;SHA256(XXXX + %s):%s\n&#x27; % (random_str[4:], str_sha256)).encode())</span><br><span class="line">        self.request.sendall(&#x27;Give Me XXXX:\n&#x27;.encode())</span><br><span class="line">        XXXX = self.request.recv(2048).strip()</span><br><span class="line"></span><br><span class="line">        if hashlib.sha256((XXXX + random_str[4:].encode())).hexdigest() != str_sha256:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    def getPQN(self):</span><br><span class="line">        while True:</span><br><span class="line">            p = getStrongPrime(2048)</span><br><span class="line">            q = getStrongPrime(2048)</span><br><span class="line">            n = p * q</span><br><span class="line">            if p.bit_length() == 2048 and q.bit_length() == 2048 and n.bit_length() == 4096:</span><br><span class="line">                return p, q, n</span><br><span class="line"></span><br><span class="line">    def encrypt(self):</span><br><span class="line">        p, q, n = self.getPQN()</span><br><span class="line">        m = bytes_to_long(flag)</span><br><span class="line">        e = 0x10001</span><br><span class="line">        c = pow(m, e, n)</span><br><span class="line">        p = bin(p)[2:]</span><br><span class="line">        p1 = list(p[:1024])</span><br><span class="line">        p2 = list(p[1024:])</span><br><span class="line">        p1[random.choice([i for i, c in enumerate(p1) if c == &#x27;1&#x27;])] = &#x27;0&#x27;</span><br><span class="line">        p2[random.choice([i for i, c in enumerate(p1) if c == &#x27;0&#x27;])] = &#x27;1&#x27;</span><br><span class="line">        return n, &#x27;&#x27;.join(p1) + &#x27;&#x27;.join(p2), c</span><br><span class="line"></span><br><span class="line">    def handle(self):</span><br><span class="line">        if not self.proof():</span><br><span class="line">            self.request.sendall(b&#x27;Error Hash!&#x27;)</span><br><span class="line">            return</span><br><span class="line">        n, p, c = self.encrypt()</span><br><span class="line">        self.request.sendall(&#x27;Press 1 to get ciphertext\n&#x27;.encode())</span><br><span class="line">        number = self.request.recv(512).strip().decode()</span><br><span class="line">        if number == &#x27;1&#x27;:</span><br><span class="line">            self.request.sendall((str(n) + &#x27;\n&#x27;).encode())</span><br><span class="line">            self.request.sendall((str(p) + &#x27;\n&#x27;).encode())</span><br><span class="line">            self.request.sendall((str(c) + &#x27;\n&#x27;).encode())</span><br><span class="line">        else:</span><br><span class="line">            self.request.sendall(&#x27;Incorrect input!\n&#x27;.encode())</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    sever = socketserver.ThreadingTCPServer((&#x27;0.0.0.0&#x27;, 10001), MyServer)</span><br><span class="line">    ThreadedTCPServer.allow_reuse_address = True</span><br><span class="line">    ThreadedTCPServer.allow_reuse_port = True</span><br><span class="line">    sever.serve_forever()</span><br></pre></td></tr></table></figure><p><strong>第一步 ，我们需要连接靶机</strong><br><em>与靶机交互即可得到一串hash，爆破前4位使字符串的hash256与题目所给的一致</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">target_hash = &quot;e7d00e85945e40298e71766df1134d7df4c33def9ded64389e541c50e689870e&quot;</span><br><span class="line"></span><br><span class="line">for char_1 in range(48, 123):  # ASCII码中数字、大写字母和小写字母的范围</span><br><span class="line">    for char_2 in range(48, 123):</span><br><span class="line">        for char_3 in range(48, 123):</span><br><span class="line">            for char_4 in range(48, 123):</span><br><span class="line">                if len(&#123;char_1, char_2, char_3, char_4&#125;) == 4:  # 确保四个字符都是不同的</span><br><span class="line">                    ascii_chars = (chr(char_1), chr(char_2), chr(char_3), chr(char_4))</span><br><span class="line">                    combination = &quot;&quot;.join(ascii_chars) + &#x27;mw21BZK89qImQVZX&#x27;  # 在每个组合后添加特定字符串</span><br><span class="line"></span><br><span class="line">                    # 计算哈希值</span><br><span class="line">                    hash_object = hashlib.sha256()</span><br><span class="line">                    hash_object.update(combination.encode())</span><br><span class="line">                    hashed = hash_object.hexdigest()</span><br><span class="line"></span><br><span class="line">                    # 检查是否匹配目标哈希值</span><br><span class="line">                    if hashed == target_hash:</span><br><span class="line">                        print(&quot;匹配的组合为:&quot;, combination)</span><br><span class="line">                        exit()  # 找到匹配的组合后结束程序运行</span><br><span class="line"></span><br><span class="line">#匹配的组合为: KsAxmw21BZK89qImQVZX</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>另一种更快的方法,直接利用pwntools与靶机交互，得到题目</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from hashlib import sha256</span><br><span class="line">import string</span><br><span class="line">from pwnlib.util.iters import mbruteforce</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">r = remote(&quot;124.71.177.14&quot;, 10010)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line">def pow():</span><br><span class="line">    r.recvuntil(&quot;XXXX + &quot;)</span><br><span class="line">    suffix = r.recv(16).decode(&quot;utf8&quot;)</span><br><span class="line">    r.recvuntil(&quot;:&quot;)</span><br><span class="line">    cipher = r.recvline().strip().decode(&quot;utf8&quot;)</span><br><span class="line">    proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==</span><br><span class="line">                        cipher, table, length=4, method=&#x27;fixed&#x27;)</span><br><span class="line">    r.sendline(proof)</span><br><span class="line"></span><br><span class="line">pow()</span><br><span class="line">r.sendline(&#x27;1&#x27;)</span><br><span class="line">r.recvuntil(&#x27;This is your flag: &#x27;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>接下来，靶机会返回一组数据</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output</span><br><span class="line">nspan><br><span class="line">pspan><br><span class="line">cspan><br></pre></td></tr></table></figure><p><strong>根据源码分析，他把其中的p做了这样一个操作</strong><br>p1[random.choice([i for i, c in enumerate(p1) if c &#x3D;&#x3D; ‘1’)]) &#x3D; ‘0’: 在 p1 的随机位置找到一个为 ‘1’ 的位，并将其改为 ‘0’。<br>p2[random.choice([i for i, c in enumerate(p1) if c &#x3D;&#x3D; ‘0’)]) &#x3D; ‘1’: 在 p2 的随机位置找到一个为 ‘0’ 的位，并将其改为 ‘1’。<br><strong>所以我们只需要根据这个漏洞遍历前1024位的0和后1024位的1进行异或操作即可</strong><br><em>笔者这边直接构造了一个密码本</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created on Sat Dec 23 14:15:02 2023</span><br><span class="line"></span><br><span class="line">@author: lenovo</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pspan><br><span class="line">pspan><br><span class="line">p2=1100110001011101101100010011110000000011001010010010100010110000000000101010111011011100010010001100000100100110101100011111100011110001001011111101001111000000010000110000111011100000001100111010011000011010001001101011100111000010001010010000000010111000110011100100110101010000000101101101100011110110111101010110011101000001100010011001001001101000000010100100100111010011011001101011011110101100000100011000100101001000010100101100100101000111000001100001001110000011000101000000001011100010011010001111011011001011000011111111101001100111000111110100010101011101100110100001010101101011001110000100100011010010001110111001001110000110100010011000010000011000011111101011011001001111010011100001101010110000110000010100100001011100101001011101010111000001100011110010010101010101100011110101111101101010101011100001001101001000101000100100111000010001100010100101100101000111100000001001110111101110110100010100000001001110011101000011100100010111101110010111101101010010001011010011100011111000011000001100011001100011</span><br><span class="line"></span><br><span class="line"># 初始二进制数</span><br><span class="line">p1 = &quotquot;</span><br><span class="line"></span><br><span class="line"># 创建文件来保存输出结果</span><br><span class="line">output_file = &quot;listp1.txt&quot;</span><br><span class="line"></span><br><span class="line">modified_binaries = []</span><br><span class="line"></span><br><span class="line"># 检查每一位，如果为0则改为1</span><br><span class="line">for i in range(len(p1)):</span><br><span class="line">    if p1[i] == &#x27;0&#x27;:</span><br><span class="line">        modified_p1 = p1[:i] + &#x27;1&#x27; + p1[i+1:]</span><br><span class="line">        modified_binaries.append(modified_p1)</span><br><span class="line"></span><br><span class="line"># 将所有修改后的结果写入文件</span><br><span class="line">with open(output_file, &quot;w&quot;) as file:</span><br><span class="line">    for modified_p1 in modified_binaries:</span><br><span class="line">        file.write(modified_p1 + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 初始二进制数</span><br><span class="line">p2 = &quotquot;</span><br><span class="line"></span><br><span class="line"># 创建文件来保存输出结果</span><br><span class="line">output_file = &quot;listp2.txt&quot;</span><br><span class="line"></span><br><span class="line">modified_binaries = []</span><br><span class="line"></span><br><span class="line"># 检查每一位，如果为0则改为1</span><br><span class="line">for i in range(len(p2)):</span><br><span class="line">    if p2[i] == &#x27;0&#x27;:</span><br><span class="line">        modified_p1 = p2[:i] + &#x27;1&#x27; + p2[i+1:]</span><br><span class="line">        modified_binaries.append(modified_p1)</span><br><span class="line"></span><br><span class="line"># 将所有修改后的结果写入文件</span><br><span class="line">with open(output_file, &quot;w&quot;) as file:</span><br><span class="line">    for modified_p1 in modified_binaries:</span><br><span class="line">        file.write(modified_p1 + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 打开 listp1.txt 和 listp2.txt 文件以及输出文件 p.txt</span><br><span class="line">with open(&#x27;listp1.txt&#x27;, &#x27;r&#x27;) as file1, open(&#x27;listp2.txt&#x27;, &#x27;r&#x27;) as file2, open(&#x27;p.txt&#x27;, &#x27;w&#x27;) as output_file:</span><br><span class="line">    # 逐行读取文件内容</span><br><span class="line">    p1_lines = file1.readlines()</span><br><span class="line">    p2_lines = file2.readlines()</span><br><span class="line"></span><br><span class="line">    # 遍历两个文件中的所有组合并将其写入输出文件</span><br><span class="line">    for p1 in p1_lines:</span><br><span class="line">        file2.seek(0)  # 重新定位到 listp2.txt 文件的开头</span><br><span class="line">        for p2 in p2_lines:</span><br><span class="line">            # 写入组合到输出文件</span><br><span class="line">            output_file.write(f&quot;&#123;p1.strip()&#125;&#123;p2.strip()&#125;\n&quot;)</span><br></pre></td></tr></table></figure><p><em>然后遍历密码本进行rsa解密即可</em><br><strong>这组数据比较特殊，直接爆破的情况下会遇到模不互素的情况</strong><br><em>所以我们代码中加入跳过模不互素的情况即可</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">n = 689148428917048752698561230187435330535844474535660975519663024686005813423116261691596518960359444398659487569281405280516756122565301499107276527019563398561775190548326726650095124347721633102683517354241616731272290842366644969493523095260169026118700872122205961125840074575539913181179624158591316008961999519664445180765805855068357280325140200570721885619207531433799082034359675994945498536733447149520815614429142224067402920944323350406000139261949314945008134993667106166371729994211490216695953544210086909916594288871041686796264966615061234867849533737850978285759970378711342002735127852669911135633280727507197770896643162828873860290236954478934069039880842775659386156914426681646990123375726632782848318765676209660955746904921591374247548244510795028854167024612141080434153599742660712283405861398644681971440490492676518075438358400296468401567303163631533553410643660848819592904185023897183284947919518254876711845553448295870785376932257813856605607299735796578232939819120320722961149946000934150374343672467868456190855696298746763169171976016018534242348938143398691129090031066272454600059389810619648519400690544893179323782655271245976991844056669848133657162015017534126606913505865717577945680934201</span><br><span class="line">e = 0x10001</span><br><span class="line"></span><br><span class="line">with open(&#x27;p.txt&#x27;, &#x27;r&#x27;) as p_file:</span><br><span class="line">    for line in p_file:</span><br><span class="line">        p = line.strip()</span><br><span class="line"></span><br><span class="line">        q_candidate = n // int(p, 2)</span><br><span class="line">        if q_candidate * int(p, 2) != n:</span><br><span class="line">            continue  # 如果不能整除，跳过当前行处理</span><br><span class="line"></span><br><span class="line">        phi = (int(p, 2) - 1) * (q_candidate - 1)</span><br><span class="line">        try:</span><br><span class="line">            d = gmpy2.invert(e, phi)</span><br><span class="line">            c = 582755493501376550312021063293971269432622857973591275097520241824639113243678154601039738777785910875356099861877799721721629337353531048570147711682149769656300149663334265982311991206401905216350979684516071937023923185938510050693691337873407171757275643036119429129455102869684317978357782902189346531413458627379268090802106996865349905645096514117275113848528530242217188285324909887937524122208178818340097019103831473349905133558912714201852986162525855145162259280450040753185483478933398530730654529154485769469682628353274080092629445953899362883988215175193630488889635324515092313723195910983168425805177795699565396108348821928449320190783128803002754706992512092839782219348149442008758998793607436136085108333190190347733106486023581643835108125870863346801123024469552193808660738495330000657495372570089643330001020748391509387487524136411478620736071866518379044131693794690230740826475529806050936866355127348429602091123271970724772553111459156824158976033596665391059836828836907988254364980925568575831029223091042575366899359078304670344881979433579570857621141077250931877184312810916773443135402247438937358801349822845162460003198622710136542402567604311023354451215661022609583925197654492145458148760392</span><br><span class="line"></span><br><span class="line">            m = pow(c, d, n)</span><br><span class="line">            decoded_message = long_to_bytes(m).decode(&#x27;utf-8&#x27;, &#x27;ignore&#x27;)</span><br><span class="line"></span><br><span class="line">            if &quot;D0g3&quot; in decoded_message:</span><br><span class="line">                print(decoded_message)</span><br><span class="line">        except ZeroDivisionError:</span><br><span class="line">            continue</span><br><span class="line">#flag：D0g3&#123;sYuWzkFk12A1gcWxG9pymFcjJL7CqN4Cq8PAIACObJ&#125;</span><br></pre></td></tr></table></figure><p>当然赛后也看到了别的师傅更快的方法，但是他们的脚本对笔者的数据并不能跑出结果，<del>官方wp的脚本也跑不了这组数据</del>所以此题存在运气成分<br><del>羡慕会写脚本</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from tqdm import *</span><br><span class="line"></span><br><span class="line">n=</span><br><span class="line">p0=&#x27;&#x27;</span><br><span class="line">c=</span><br><span class="line">def msg(n, p0, c):</span><br><span class="line">    p1 = p0[:1024]</span><br><span class="line">    p2 = p0[1024:]</span><br><span class="line">    pp1 = [i for i, c in enumerate(p1) if c == &#x27;0&#x27;]</span><br><span class="line">    pp2 = [i for i, c in enumerate(p1) if c == &#x27;1&#x27;]</span><br><span class="line">    # print(pp1)</span><br><span class="line">    for i in tqdm(pp1):</span><br><span class="line">        p1 = list(p0[:1024])</span><br><span class="line">        p1[i] = &#x27;1&#x27;</span><br><span class="line">        for j in pp2:</span><br><span class="line">            p2 = list(p0[1024:])</span><br><span class="line">            p2[j] = &#x27;0&#x27;</span><br><span class="line">            ppp = &#x27;&#x27;.join(p1) + &#x27;&#x27;.join(p2)</span><br><span class="line">            ppp2 = int(ppp, 2)</span><br><span class="line">            if n % ppp2 == 0:</span><br><span class="line">                p = ppp2</span><br><span class="line">                print(i, j)</span><br><span class="line">                print(p)</span><br><span class="line">                q = n // p</span><br><span class="line">                d = invert(65537, (p-1)*(q-1))</span><br><span class="line">                m = long_to_bytes(int(pow(c, d, n)))</span><br><span class="line">                if b&#x27;D0g3&#x27; in m:</span><br><span class="line">                    print(m)</span><br><span class="line">                    return</span><br><span class="line">            p2[j] = &quot;1&quot;</span><br><span class="line">        p1[i] = &quot;0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msg(n, p0, c)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;安洵杯密码题目分析&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2023强网杯密码复现</title>
    <link href="https://averbeih.github.io/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%AF%86%E7%A0%81%E5%A4%8D%E7%8E%B0/"/>
    <id>https://averbeih.github.io/2023/12/20/2023%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%AF%86%E7%A0%81%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-12-20T06:53:51.000Z</published>
    <updated>2024-01-12T00:02:42.002Z</updated>
    
    <content type="html"><![CDATA[<p>强网杯</p><span id="more"></span><p><strong>not only rsa</strong><br>task</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import bytes_to_long</span><br><span class="line">from secret import flag</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">n = 6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849</span><br><span class="line">e = 641747</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">flag = flag + os.urandom(n.bit_length() // 8 - len(flag) - 1)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">with open(&#x27;out.txt&#x27;, &#x27;w&#x27;) as f:</span><br><span class="line">    print(f&quot;&#123;n = &#125;&quot;, file=f)</span><br><span class="line">    print(f&quot;&#123;e = &#125;&quot;, file=f)</span><br><span class="line">    print(f&quot;&#123;c = &#125;&quot;, file=f)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = 6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849</span><br><span class="line">e = 641747</span><br><span class="line">c = 730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目分析：<br>观察本题参数可以发现<br>n是一个数x的五次方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=91027438112295439314606669837102361953591324472804851543344131406676387779969</span><br></pre></td></tr></table></figure><p>且x是e的指数关系<br>所以这题我们采用amm的方式对e进行开方</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;强网杯&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>基于Diffie-Hellman的公钥加密</title>
    <link href="https://averbeih.github.io/2023/12/12/%E5%9F%BA%E4%BA%8EDiffie-Hellman%E7%9A%84%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86/"/>
    <id>https://averbeih.github.io/2023/12/12/%E5%9F%BA%E4%BA%8EDiffie-Hellman%E7%9A%84%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86/</id>
    <published>2023-12-11T16:00:00.000Z</published>
    <updated>2023-12-25T08:02:03.197Z</updated>
    
    <content type="html"><![CDATA[<p>在那篇划时代的论文《New Directions in Cryptography》中，作者Diffie和Hellman虽然并没有提出一个实际的公钥密码加密算法，但却提出了一个可以在不安全信道中交换密钥的协议，这个密钥交换协议就是基于离散对数难题的。</p><span id="more"></span><p>Diffie-Hellman密钥交换协议︰</p><p>1.首先通信双方Alice和Bob先共享两个公共参数，模数p和Z<del>p</del>​^*^,中的一个原根g。</p><ol><li>Alice本地随机生成一个私钥a，并计算公钥A &#x3D; g^a^，发送A给Bob</li><li>Bob在收到A后，也本地随机生成一个私钥b，并计算公钥B&#x3D;g^b^，发送B给Alice;此外，Bob还可以计算共享密钥k &#x3D; A^b^ &#x3D; g^ab^</li><li>Alice收到Bob发过来的B后，也可以计算共享密钥k &#x3D; B^a^ &#x3D; g^ab^<br>5．至此，密钥交换结束，双方都可以得到一份共享密钥</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在那篇划时代的论文《New Directions in Cryptography》中，作者Diffie和Hellman虽然并没有提出一个实际的公钥密码加密算法，但却提出了一个可以在不安全信道中交换密钥的协议，这个密钥交换协议就是基于离散对数难题的。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
